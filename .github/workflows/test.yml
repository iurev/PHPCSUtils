name: Test



on:
  # Run on pushes to `stable` and `develop` and on all pull requests.
  push:
    branches:
      - stable
      - develop
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # - COMPOSER_ROOT_VERSION is needed to get round the recursive dependency when using CI.
  COMPOSER_ROOT_VERSION: '1.99.99'

jobs:
  #### CODE COVERAGE STAGE ####
  # N.B.: Coverage is only checked on the lowest and highest stable PHP versions
  # and a low/high of each major for PHPCS.
  # These builds are left out off the "test" stage so as not to duplicate test runs.
  coverage:  
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - php: '8.2'
            phpcs_version: 'dev-master'

    name: "Coverage: PHP ${{ matrix.php }} - PHPCS ${{ matrix.phpcs_version }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # On stable PHPCS versions, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      - name: Setup ini config
        id: set_ini
        run: |
          if [ "${{ matrix.phpcs_version }}" != "dev-master" ]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED, display_errors=On' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ matrix.extensions }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: xdebug

      - name: "DEBUG: Show version details"
        run: php -v

      - name: "Composer: set PHPCS version for tests (master)"
        if: ${{ matrix.phpcs_version != 'lowest' }}
        run: composer require squizlabs/php_codesniffer:"${{ matrix.phpcs_version }}" --no-update --no-scripts --no-interaction

      - name: Install Composer dependencies
        uses: "ramsey/composer-install@v2"
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: "Composer: set PHPCS version for tests (lowest)"
        if: ${{ matrix.phpcs_version == 'lowest' }}
        run: composer update squizlabs/php_codesniffer --prefer-lowest --no-scripts --no-interaction

      - name: Grab PHPUnit version
        id: phpunit_version
        # yamllint disable-line rule:line-length
        run: echo "VERSION=$(vendor/bin/phpunit --version | grep --only-matching --max-count=1 --extended-regexp '\b[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT

      - name: "DEBUG: Show grabbed version"
        run: echo ${{ steps.phpunit_version.outputs.VERSION }}

      # PHPUnit 9.3 started using PHP-Parser for code coverage causing some of our coverage builds to fail.
      # As of PHPUnit 9.3.4, a cache warming option is available.
      # Using that option prevents issues with PHP-Parser backfilling PHP tokens when PHPCS does not (yet),
      # which would otherwise cause tests to fail on tokens being available when they shouldn't be.
      # As coverage is only run on high/low PHP, the high PHP version will use PHPUnit 10, so just check for that.
      - name: "Warm the PHPUnit cache (PHPUnit 9.3+)"
        if: ${{ startsWith( steps.phpunit_version.outputs.VERSION, '10.' ) }}
        run: vendor/bin/phpunit -c phpunit10.xml.dist --coverage-cache ./build/phpunit-cache --warm-coverage-cache

      - name: "Run the unit tests without caching with code coverage (PHPUnit < 10)"
        if: ${{ ! startsWith( steps.phpunit_version.outputs.VERSION, '10.' ) }}
        run: vendor/bin/phpunit
        env:
          PHPCS_VERSION: ${{ matrix.phpcs_version }}
          PHPCSUTILS_USE_CACHE: false

      - name: "Run the unit tests without caching with code coverage (PHPUnit 10+)"
        if: ${{ startsWith( steps.phpunit_version.outputs.VERSION, '10.' ) }}
        run: vendor/bin/phpunit -c phpunit10.xml.dist --coverage-cache ./build/phpunit-cache
        env:
          PHPCS_VERSION: ${{ matrix.phpcs_version }}
          PHPCSUTILS_USE_CACHE: false

      # Global install is used to prevent a conflict with the local composer.lock.
      - name: Coveralls
        if: ${{ success() }}
        uses: coverallsapp/github-action@SR-69/ability-to-select-version-of-coverage-reporter-public-issue-170
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
